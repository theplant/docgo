[{"URL":"index.html","Title":"Introduction","Body":"Write documentation with go code in a declarative way to create beautiful documentation Why use docgo The developer community often use markdown or in Python world use Sphinx and reStructuredText to create tech documentations, We think they are nice, But because of these reasons we created this package for the Go community: Work together with snippetgo to use real executable code as example code blocks in documentation, So that it won't be invalid or obsolete after code change, Since Go compiler will pick out the errors and you will have to fix the examples to make compiler happy, and the documentation is automatically updated. Write documentation in Go code not only you can still write markdown, But also you can access the flexibility of a programming language, to use components, and reuse parts that are duplicated. Documents exists inside go code, means it can be distributed as go packages, so it wont' be restricted with directory layout. Make developer focus on writing documentation, instead of worrying about document styles. Getting Started Run this script to install docgo binary $ go install github.com/theplant/docgo/x/docgo@main Go to a go package that use go modules with go.mod in the directory. and run: $ docgo It will output something like this: docsrc/assets/logo.png generated\ndocsrc/build/main.go generated\ndocsrc/dev/main.go generated\ndocsrc/dev.sh generated\ndocsrc/examples-generated.go generated\ndocsrc/home.go generated\nDone\n\ncd docsrc \u0026\u0026 ./dev.sh to start your doc Run cd docsrc \u0026\u0026 ./dev.sh and access http://localhost:8800 to see generated first doc. The ./dev.sh script is using entr to do auto restart server after you edit any go file. So make sure to have that installed if you haven't $ brew install entr Then you can go back to the docsrc directory to edit and create go files to update docs. The following code is used to build this doc Hello World package docsrc  import (  . \"github.com/theplant/docgo\"  \"github.com/theplant/docgo/ch\"  . \"github.com/theplant/htmlgo\" )  var HelloWorld = Doc(  Markdown(` ## Overview  Write some beautiful docs `),  Tip(\"This is quite important to learn\"),   H2(\"A new section\"),  P(Text(\"Doc of that section\")),  ch.Code(\"var Hello = 123\").Language(\"go\"), ).  Title(\"Hello World\").  AbstractText(   \"Hello world doc to describe how easy it is to create a doc\",  )  Use the following code to boot up your doc app, Suppose you have already created a Home Doc in docsrc package. func main() {  port := os.Getenv(\"PORT\")  if len(port) == 0 {   port = \"8800\"  }  fmt.Println(\"Starting docs at :\" + port)  http.Handle(\"/\", docgo.New().   MainPageTitle(\"docgo Document\").   Assets(\"/assets/\", docsrc.Assets).   DocTree(docsrc.DocTree...).   Build(),  )  err := http.ListenAndServe(\":\"+port, nil)  if err != nil {   panic(err)  } }  "},{"URL":"github-pages-integration.html","Title":"Github Pages Integration","Body":"Github Pages Setting By default ./dev.sh will automatically run go run ./build/main.go which will generate static html pages along with js and css, assets files into a directory docs in your repo's root directory. This way you can go to Github Settings -\u003e Pages to turn on the settings like this: And commit the docs directory into your main branch to publish your doc to github. "},{"URL":"use-with-htmlgo.html","Title":"Use with htmlgo","Body":"The ability to use any html code inside your documentation is pretty good Use any html Use together with htmlgo , basically means you can write any html you like inside your doc, This gives you a whole lot of flexibility when writing documentation. Take a look at this example: var s = []struct {  name string }{{name: \"123\"}}  var MarkdownDifference = Doc(   H2(\"Be aware the Go source code limitations\"),   P(   Text(\"Since it's not possible to write\"),   Code(\"`\"),   Text(\"if you are writing inside a\"),   A().Text(\"go raw string literals\").Href(\"https://golang.org/ref/spec#String_literals\"),   Text(\"which normally used to pass in \"),   Code(\"Markdown\"),   Text(\"func, So we have to replace it with\"),   Code(\"~\"),  ),  ch.Code(HowToSayHelloWithCodeBlockSample).Language(\"go\"), ).Title(\"The difference with Github Flavored Markdown\")  "},{"URL":"the-difference-with-github-flavored-markdown.html","Title":"The difference with Github Flavored Markdown","Body":"Be aware the Go source code limitations Since it's not possible to write ` if you are writing inside a go raw string literals which normally used to pass in Markdown func, So we have to replace it with ~ var HowToSayHelloWithCodeBlock = Doc(Markdown(` ## Say Hello  Hi, There  ~~~ var Hello = true ~~~  `)).Title(\"How to say hello with code block\")  "},{"URL":"hello-world.html","Title":"Hello World","Body":"Hello world doc to describe how easy it is to create a doc Overview Write some beautiful docs Tip This is quite important to learn A new section Doc of that section var Hello = 123 "}]
